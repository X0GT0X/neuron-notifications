name: CI

on:
    push:
    pull_request:

permissions:
    contents: read

jobs:
    build:
        name: Docker Build
        
        runs-on: ubuntu-20.04
        
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Set up Docker Build
                uses: docker/setup-buildx-action@v2

            -   name: Build and export
                uses: docker/build-push-action@v4
                with:
                    context: .
                    file: CI.Dockerfile
                    target: app_php_dev
                    tags: php:latest
                    outputs: type=docker,dest=/tmp/php.tar

            -   name: Upload artifact
                uses: actions/upload-artifact@v3
                with:
                    name: php
                    path: /tmp/php.tar
    
    static-analysis:
        name: Static Analysis
        
        runs-on: ubuntu-20.04
        
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Validate composer.json and composer.lock
                run: composer validate --strict

            -   name: Cache Composer packages
                id: composer-cache
                uses: actions/cache@v3
                with:
                    path: vendor
                    key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-

            -   name: Install dependencies
                run: composer install --prefer-dist --no-progress

            -   name: PHP CS
                run: composer run-script php-cs

            -   name: PHP Stan
                run: composer run-script php-stan
    
    unit-tests:
        name: Unit Tests

        needs: static-analysis

        runs-on: ubuntu-20.04

        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Validate composer.json and composer.lock
                run: composer validate --strict

            -   name: Cache Composer packages
                id: composer-cache
                uses: actions/cache@v3
                with:
                    path: vendor
                    key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-
            -   name: Install dependencies
                run: composer install --prefer-dist --no-progress

            -   name: Testing
                uses: php-actions/phpunit@v3
                env:
                    XDEBUG_MODE: coverage
                with:
                    bootstrap: vendor/autoload.php
                    configuration: phpunit.xml.dist
                    php_extensions: xdebug
                    args: tests/UnitTest --coverage-clover ./clover.xml

            -   name: Code coverage
                uses: codecov/codecov-action@v3
                with:
                    token: ${{ secrets.CODE_COV_TOKEN }}
                    files: ./clover.xml
                    fail_ci_if_error: true
                    verbose: true
    
    integration-tests:
        name: Integration Tests

        needs: build

        runs-on: ubuntu-20.04

        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Download artifact
                uses: actions/download-artifact@v3
                with:
                    name: php
                    path: /tmp

            -   name: Load image
                run: |
                    docker load --input /tmp/php.tar
                    docker image ls -a

            -   name: Start services
                run: docker compose -f docker-compose.ci.yml up -d

            -   name: Wait
                run: sleep 5s
                shell: bash

            -   name: Creating databases
                run: docker compose -f docker-compose.ci.yml exec php bin/console doctrine:database:create && docker compose -f docker-compose.ci.yml exec php bin/console --env=test doctrine:database:create

            -   name: Run migrations
                run: docker compose -f docker-compose.ci.yml exec php bin/console --env=test doctrine:schema:create

            -   name: Testing
                run: docker compose -f docker-compose.ci.yml exec php bin/phpunit tests/IntegrationTest
